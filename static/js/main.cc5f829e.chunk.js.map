{"version":3,"sources":["components/TimeWidget.js","App.js","reportWebVitals.js","index.js"],"names":["randomInt","min","max","Math","floor","random","randomIntRange","start","range","ScheduledItem","props","style","gridColumnStart","startTime","gridColumnEnd","endTime","backgroundColor","color","className","ScheduleRow","useState","validItems","setValidItems","colors","useEffect","minTime","cTime","maxTime","scheduledItems","filter","bg","length","item","ind","map","TimeWidgetContainer","state","currentTime","schedule","scrollLoc","itemStates","this","setState","Array","val","generateSchedule","countItems","concat","forEach","scheduleRow","rowItem","push","nextItemStart","nextItemEnd","onClick","generate10","addLayer","type","disabled","onChange","e","target","value","pointerEvents","draggable","onDragStart","onInput","preventDefault","Number","React","Component","App","maxLength","setMaxLength","htmlFor","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc5f829e.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport './TimeWidget.css'\r\n/* helper functions for generating random numbers*/\r\nfunction randomInt(min, max){\r\n    return Math.floor(Math.random()*(max-min+1)+min);\r\n}\r\nfunction randomIntRange(start, range){\r\n    return randomInt(start, start+range);\r\n}\r\n/*\r\n    ScheduledItem is an element within a schedule row, that fills the grid of ScheduleRow from startTime to endTime\r\n    ScheduledItem represents an Item in the row\r\n    props:\r\n        startTime: start index of grid\r\n        endTime: end index of grid\r\n        color: color changes based on type of scheduled item\r\n*/\r\nconst ScheduledItem = (props)=>{\r\n    let style={\r\n        gridColumnStart:props.startTime, \r\n        gridColumnEnd:props.endTime,\r\n        backgroundColor:props.color\r\n\r\n    }\r\n    return(props.startTime?<div className=\"scheduled-item\" style={style}></div>:<></>\r\n    )\r\n}\r\n\r\n/*\r\n    ScheduleRow is a grid that is filled by ScheduledItems whose time are currently within the visible range\r\n    ScheduleRow represents a layer in the schedule\r\n    props:\r\n        cTime: the current time provided by the TimeWidget\r\n        scheduledItems: all scheduled items provided to this row\r\n    state:\r\n        validItems: validItems is a list of scheduled items that are currently visible according to cTime \r\n        */\r\nconst ScheduleRow = (props) =>{\r\n    let [validItems, setValidItems] = useState([]);\r\n    const colors=[\"#50A31D\", \"#C79300\", \"#6767B5\"]\r\n    useEffect(()=>{\r\n        const minTime = props.cTime;\r\n        const maxTime = props.cTime+70;\r\n        const validItems = props.scheduledItems?.filter(([startTime, endTime, itemState])=>{\r\n            return ((startTime>=minTime&&startTime<maxTime)||(startTime<minTime&&endTime>minTime))\r\n        })\r\n        setValidItems(validItems);\r\n    },[props.cTime,props.scheduledItems])\r\n\r\n    return(\r\n        <div className={props.bg===1?\"schedule-row schedule-dark\":\"schedule-row\"}>\r\n            {/* First four components are recycled, any more get added afterwards*/}\r\n            <ScheduledItem color={colors[validItems?.[0]?.[2]]} startTime={Math.max(1, validItems?.[0]?.[0]-props.cTime)} endTime={validItems?.[0]?.[1]-props.cTime+1} />\r\n            <ScheduledItem color={colors[validItems?.[1]?.[2]]}startTime={Math.max(1, validItems?.[1]?.[0]-props.cTime)} endTime={validItems?.[1]?.[1]-props.cTime+1} />\r\n            <ScheduledItem color={colors[validItems?.[2]?.[2]]}startTime={Math.max(1, validItems?.[2]?.[0]-props.cTime)} endTime={validItems?.[2]?.[1]-props.cTime+1} />\r\n            <ScheduledItem color={colors[validItems?.[3]?.[2]]}startTime={Math.max(1, validItems?.[3]?.[0]-props.cTime)} endTime={validItems?.[3]?.[1]-props.cTime+1} />\r\n            {validItems?.length>3?validItems?.filter((item, ind)=>ind>3).map(([startTime, endTime, color], ind)=>{\r\n                return <ScheduledItem key={ind} color={colors[color]} startTime={Math.max(1, startTime-props.cTime)} endTime={endTime-props.cTime+1} />\r\n            }):<></>}\r\n\r\n            {/* PRE-OPTIMIZATION */ /*this.state.validItems?.map(([startTime, endTime], ind)=>{\r\n                return <ScheduledItem key={ind} startTime={Math.max(1, startTime-props.cTime)} endTime={endTime-props.cTime+1} />\r\n            })*/}\r\n        </div>\r\n    ) \r\n\r\n}\r\n/*\r\n    TimeWidgetContainer is the scheduler widget, whose header contains visual info, and body is composed of Scheduler Rows\r\n    props: \r\n        maxTime: length in ticks of the schedule\r\n    state:\r\n        currentTime: current tick, controlled by horizontal slider\r\n        minTime: start time of widget\r\n        schedule: holds items that are passed to rows\r\n        scrollLoc: current verical scroll index, controlled by vertical slider\r\n        itemStates: holds counts of each type of item (red, green, blue)\r\n    functions:\r\n        generate10(): generates 10 rows of randomly scheduled items\r\n        addLayer(): generates 1 row of randomly scheduled items and adds it to schedule\r\n        countItems(): updates itemStates with count of each item type\r\n        generateSchedule(maxTime):returns an array that represents a row of scheduled items starting from 0 and going to maxTime\r\n*/\r\nclass TimeWidgetContainer extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        const maxTime=this.props.maxTime||3000;\r\n        this.state={\r\n            currentTime:0, \r\n            minTime:0, \r\n            schedule:[],\r\n            scrollLoc:0, \r\n            itemStates:[0,0,0]\r\n        }\r\n    }\r\n    generate10(){\r\n        this.setState({scrollLoc:0, schedule:[...Array(10)].map((val,ind)=>this.generateSchedule(this.props.maxTime))}, ()=>this.countItems());\r\n    }\r\n    addLayer(){\r\n        this.setState({schedule:this.state.schedule.concat([this.generateSchedule(this.props.maxTime)])}, ()=>this.countItems());\r\n    }\r\n    countItems(){\r\n        let itemStates = [0,0,0];\r\n        //count how many of each color item there are\r\n        this.state.schedule.forEach(scheduleRow=>scheduleRow.forEach(rowItem=>itemStates[rowItem[2]]++))\r\n        this.setState({itemStates:itemStates});\r\n    }\r\n    generateSchedule(maxTime){\r\n        let schedule = [];\r\n        schedule.push([randomInt(0,30), randomInt(31, 60), randomInt(0,2)]);\r\n        while(schedule[schedule.length-1][0]<maxTime-60){\r\n            const nextItemStart = randomIntRange(schedule[schedule.length-1][1]+1,60)\r\n            const nextItemEnd = randomIntRange(nextItemStart+1, 30);\r\n            schedule.push([nextItemStart, nextItemEnd, randomInt(0, 2)]);\r\n        }\r\n        return schedule;\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"widget-container\">\r\n                <div className=\"widget-head\">\r\n                    <div className=\"head-info\">\r\n                        <p className=\"info info-green\">{this.state.itemStates[0]} Completed </p>\r\n                        <p className=\"info info-yellow\">{this.state.itemStates[1]} Pending </p>\r\n                        <p className=\"info info-purp\">{this.state.itemStates[2]} Jeopardy </p>\r\n                        <button className=\"add-layer\" onClick={()=>this.generate10()}>Generate New Schedule </button>\r\n                        <button className=\"add-layer\" onClick={()=>this.addLayer()}>Add Layer</button>\r\n                    </div>\r\n                    <div className=\"head-timeline\">\r\n                        {[...Array(70)].map((item,ind)=><p key={ind} className=\"tick tick-number\">{(ind+this.state.currentTime)%5===0?ind+this.state.currentTime:\"\"}</p>)}\r\n                        {[...Array(70)].map((item,ind)=><><p key={ind}className=\"tick\">|</p></>)}\r\n                        \r\n                    </div>\r\n                </div>\r\n                <div className=\"widget-body\">\r\n                    <div className=\"body-content\">\r\n                        <div className=\"background-body\">\r\n                        {[...Array(70)].map((item,ind)=><><p key={ind} className=\"tick\">{(ind+this.state.currentTime)%5===0?\"|\":\"\"}</p></>)}\r\n\r\n                        </div>\r\n                            {/* rows get recycled,bg changes with scroll to emulate movement*/}\r\n                            <ScheduleRow bg={(this.state.scrollLoc)%2} cTime={this.state.currentTime} scheduledItems={this.state.schedule[this.state.scrollLoc]} />\r\n                            <ScheduleRow bg={(this.state.scrollLoc+1)%2} cTime={this.state.currentTime} scheduledItems={this.state.schedule[this.state.scrollLoc+1]} />\r\n                            <ScheduleRow bg={(this.state.scrollLoc)%2}cTime={this.state.currentTime} scheduledItems={this.state.schedule[this.state.scrollLoc+2]} />\r\n                            <ScheduleRow bg={(this.state.scrollLoc+1)%2} cTime={this.state.currentTime} scheduledItems={this.state.schedule[this.state.scrollLoc+3]} />\r\n                            <ScheduleRow bg={(this.state.scrollLoc)%2}cTime={this.state.currentTime} scheduledItems={this.state.schedule[this.state.scrollLoc+4]} />\r\n                            <ScheduleRow bg={(this.state.scrollLoc+1)%2} cTime={this.state.currentTime} scheduledItems={this.state.schedule[this.state.scrollLoc+5]} />\r\n                            <ScheduleRow bg={(this.state.scrollLoc)%2}cTime={this.state.currentTime} scheduledItems={this.state.schedule[this.state.scrollLoc+6]} />\r\n                            <ScheduleRow bg={(this.state.scrollLoc+1)%2} cTime={this.state.currentTime} scheduledItems={this.state.schedule[this.state.scrollLoc+7]} />\r\n                            <ScheduleRow bg={(this.state.scrollLoc)%2}cTime={this.state.currentTime} scheduledItems={this.state.schedule[this.state.scrollLoc+8]} />\r\n                            <ScheduleRow bg={(this.state.scrollLoc+1)%2} cTime={this.state.currentTime} scheduledItems={this.state.schedule[this.state.scrollLoc+9]} />\r\n\r\n                        {/* PRE-OPTIMIZATION */ /*this.state.schedule.map((sched,ind)=>{\r\n                            return <ScheduleRow key={ind} cTime={this.state.currentTime} scheduledItems={sched} />\r\n                        })*/}\r\n                    </div>\r\n                    <div className=\"body-scroll\">\r\n                        <input className=\"v-scroll\" type=\"range\" min={10} max={this.state.schedule.length} disabled={this.state.schedule.length<11} onChange={e=>{this.setState({scrollLoc:e.target.value-10})}}/>\r\n                    </div>\r\n                    <div className=\"foreground-body\">\r\n                        <p className=\"center-line\" pointerEvents=\"none\" draggable={false}>|</p> \r\n                    </div>\r\n                </div>\r\n                <div className=\"widget-footer\">\r\n                    <input className=\"h-scroll\" min={this.state.minTime} max={this.props.maxTime} type=\"range\" value={this.state.currentTime} onDragStart={e=>false} onInput={e=>{e.preventDefault(); this.setState({currentTime:Number(e.target.value)})}} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TimeWidgetContainer;","import './App.css';\nimport {useState} from 'react'\nimport TimeWidget from './components/TimeWidget.js'\nfunction App() {\n  let [maxLength, setMaxLength] = useState(3000);\n  return (<>\n    <label htmlFor=\"schedule-length\">Schedule Length(ticks) </label>\n    <input type=\"number\" id=\"schedule-length\" value={maxLength} onChange={e=>setMaxLength(Number(e.target.value))}/>\n    <div className=\"guardian-body\">\n      <TimeWidget maxTime={maxLength} />\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}